# -*- coding: utf-8 -*-
"""
Django settings for django_image_dump project.

Generated by 'django-admin startproject' using Django 1.8.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

from datetime import timedelta

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'change-me'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_cleanup',
    'widget_tweaks',
    'bootstrap_forms',
    'accounts',
    'images',
)

MIDDLEWARE = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware'
)

ROOT_URLCONF = 'image_dump.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'image_dump', 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'image_dump.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-gb'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/m/'
THUMBNAIL_UPSCALE = False

LOGIN_REDIRECT_URL = 'images:index'
DES_KEY = 'changeme'
ALLOWED_MIME_TYPES = (
    b'image/png',
    b'image/jpeg',
    b'image/gif',
)


# Inplace edit
INSTALLED_APPS += (
    'inplaceeditform_bootstrap',
    'inplaceeditform',
)

ADAPTOR_INPLACEEDIT_EDIT = 'images.perms.UploadedByEditInline'


# Debug toolbar
INSTALLED_APPS += (
    'debug_toolbar',
)


# Sorl
INSTALLED_APPS += (
    'sorl.thumbnail',
)

# Haystack
INSTALLED_APPS += (
    'haystack',
    'search',
)

HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
    },
}


# Django extensions
INSTALLED_APPS += (
    'django_extensions',
)


# Lanaguages
LANGUAGES = (
    ('fr', 'Fran√ßais'),
)
LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)


# YouTube app
INSTALLED_APPS += (
    'youtube',
)
YOUTUBE_DOWNLOAD_ROOT = os.path.join(BASE_DIR, 'youtube_videos')
YOUTUBE_DOWNLOAD_URL = '/videos/'
YOUTUBE_API_KEY = 'CHANGE-ME'


# Celery
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Europe/London'

CELERYBEAT_SCHEDULE = {
    'rebuild-search-index': {
        'task': 'search.tasks.rebuild_index',
        'schedule': timedelta(minutes=1)
    },
}
